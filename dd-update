#!/bin/bash

# Read conf file from same location as script
_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
. $_SCRIPT_DIR/rnsupdate.conf


debugEcho () {
  [[ "$debug" ]] && builtin echo $@ >&2
}

_usage(){
  echo "Usage: $(basename $0) [--hostname home.example.com] [--ipAddress 192.168.1.1] [--forceUpdate] [--dry-run]"
  echo "    IP address can be replaced with 'local' or 'public' (default)"
  echo "     to state what method should be used to determine the IP address."
  echo "     e.g. $(basename $0) --ipAddress local "
}

_setArgs(){
  getIPMethod="public"
  while [ "$1" != "" ]; do
    case $1 in
      "-h" | "--hostname")
        debugEcho $1 $2
        shift
        hostname=$1
        ;;
      "-i" | "--ipAddress")
        debugEcho $1 $2
        shift
        ipAddress=$1
        if [ "$ipAddress" == "local" ]
        then
            getIPMethod="local"
            ipAddress=""
        elif [ "$ipAddress" == "public" ]
        then
            getIPMethod="public"
            ipAddress=""
        fi
        ;;
      "-f" | "--forceUpdate")
        debugEcho $1
        forceUpdate=true
        ;;
      "-n" | "--dry-run")
        debugEcho $1
        dryrun=true
        ;;
      "--help")
        debugEcho $1
        _usage
        exit 0
        ;;
      "-d" | "--debug")
        debug=true
        debugEcho $1
        ;;
    esac
    shift
  done
  
  debugEcho "Args read."
}

# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_ip IP_ADDRESS; then echo good; else echo bad; fi
#
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# Test hostname for validity:
function valid_hostname()
{
    local  hostname=$1
    local  stat=1

    [[ $hostname =~ ${DDNS_ZONE}$ ]]
    stat=$?
    
    return $stat
}

# Find the interface used for the default route out of this machine.
# Command is different on OSX vs Linux vs other OSes, so need to handle that here
_getMyDefaultInterface(){
    local unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)
            machine=Linux
            interface=$(ip -4 route | grep default | awk '{print $5}')
            ;;
        Darwin*)
            machine=Mac
            interface=$(netstat -nr -f inet | grep default | grep -oE '[^ ]+\s*$')
            ;;
#         CYGWIN*)    machine=Cygwin;;
#         MINGW*)     machine=MinGw;;
        *)          machine="UNKNOWN:${unameOut}"
    esac
    echo ${interface}
}

# Find the local IP address on the default interface.
# This is more likely a non-public IP address
_getMyDefaultIP(){
    local interface=$(_getMyDefaultInterface)
    local command="ifconfig ${interface} | grep 'inet ' | awk '{print \$2}'"
    debugEcho $command
    local ip=$(eval "$command")
    debugEcho $ip
    echo $ip
}


ipcheckURL='https://api.ipify.org'

_getMyPublicIP(){
  local command="/usr/bin/curl -sS $ipcheckURL"
  debugEcho $command
  local ip=$($command)
  debugEcho $ip
  echo $ip
}

_getMyHostname(){
  local command="/bin/hostname"
  debugEcho $command
  local hostname=$($command)
  debugEcho $hostname
  echo $hostname
}

_getCurrentDNS(){
  local command="/usr/bin/dig +noall +answer +short $1"
  debugEcho $command
  local currentDDNS=$($command)
  debugEcho $currentDDNS
  echo $currentDDNS
}

_updateDNS(){
  local hostname=$1
  local ipAddress=$2
  
  $NSUPDATE_COMMAND <<EOF
server ${DNS_SERVER}
zone ${DDNS_ZONE}
del ${hostname} A
add ${hostname} 0 A ${ipAddress}
send
quit
EOF
}

_setArgs $*

# if not set on command line, get using the default methods
[ -z "$hostname" ] && hostname=$(_getMyHostname)

if [ -z "$ipAddress" ]
then
    if [ "$getIPMethod" == "local" ]
    then
        ipAddress=$(_getMyDefaultIP)
    elif [ "$getIPMethod" == "public" ]
    then
        ipAddress=$(_getMyPublicIP)
    fi
fi

# get the current value set in DNS
currentDNS=$(_getCurrentDNS $hostname)

errors=0

if ! valid_hostname $hostname
then
  ((errors++))
  echo Hostname not in DDNS Zone: $hostname
fi

if ! valid_ip $ipAddress
then
  ((errors++))
  echo Invalid IP Address: $ipAddress
fi

if [[ $errors -ne 0 ]]
then
  exit $errors
fi

# decide if an update is necessary
if ( ! [ -z "$forceUpdate" ] ) || \
    [ -z "$currentDNS" ] || \
    [ "$currentDNS" != "$ipAddress" ]
then
    if [ -z $dryrun ]
    then
        _updateDNS $hostname $ipAddress
    else
        echo _updateDNS $hostname $ipAddress
    fi
fi